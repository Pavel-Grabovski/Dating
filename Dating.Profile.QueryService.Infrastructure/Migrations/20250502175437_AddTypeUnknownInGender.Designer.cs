// <auto-generated />
using System;
using Dating.Profile.Core.Enum;
using Dating.Profile.QueryService.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Dating.Profile.QueryService.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20250502175437_AddTypeUnknownInGender")]
    partial class AddTypeUnknownInGender
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "gender", new[] { "unknown", "man", "woman" });
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Dating.Profile.QueryService.Domain.Entities.PremiumSubscription", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("UserId");

                    b.ToTable("PremiumSubscriptions", t =>
                        {
                            t.HasCheckConstraint("CK_Valid_EndTime", "\"EndTime\" > NOW()");
                        });
                });

            modelBuilder.Entity("Dating.Profile.QueryService.Domain.Entities.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Birthday")
                        .HasColumnType("date");

                    b.Property<Gender>("Gender")
                        .HasColumnType("gender");

                    b.Property<bool>("HaveChildren")
                        .HasColumnType("boolean");

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnType("geometry");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("WasOnline")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("UserProfiles", t =>
                        {
                            t.HasCheckConstraint("CK_Valid_Birthday", "\"Birthday\" >= '1900-01-01' AND \"Birthday\" <= current_date");

                            t.HasCheckConstraint("CK_Valid_Gender", "\"Gender\" IN ('man', 'woman')");
                        });
                });

            modelBuilder.Entity("Dating.Profile.QueryService.Domain.Entities.UserSearchFilters", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Gender>("Gender")
                        .HasColumnType("gender");

                    b.Property<bool?>("HaveChildren")
                        .HasColumnType("boolean");

                    b.Property<int>("SearchRadius")
                        .HasColumnType("integer");

                    b.Property<int>("YearBirthFrom")
                        .HasColumnType("integer");

                    b.Property<int>("YearBirthTo")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.ToTable("UsersSearchFilters", t =>
                        {
                            t.HasCheckConstraint("CK_SearchRadius_Greater_Zero", "\"SearchRadius\" > 0");
                        });
                });

            modelBuilder.Entity("Dating.Profile.QueryService.Domain.Entities.PremiumSubscription", b =>
                {
                    b.HasOne("Dating.Profile.QueryService.Domain.Entities.UserProfile", "Owner")
                        .WithOne("PremiumSubscription")
                        .HasForeignKey("Dating.Profile.QueryService.Domain.Entities.PremiumSubscription", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Dating.Profile.QueryService.Domain.Entities.UserSearchFilters", b =>
                {
                    b.HasOne("Dating.Profile.QueryService.Domain.Entities.UserProfile", "UserProfile")
                        .WithOne("Preferences")
                        .HasForeignKey("Dating.Profile.QueryService.Domain.Entities.UserSearchFilters", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Dating.Profile.QueryService.Domain.Entities.UserProfile", b =>
                {
                    b.Navigation("Preferences")
                        .IsRequired();

                    b.Navigation("PremiumSubscription")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
